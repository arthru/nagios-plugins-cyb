#!/usr/bin/perl
#
# Copyright (C) 2013 Cyril Bouthors <cyril@boutho.rs>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#

use constant;
# Only use when debugging because it can lead to 50% performance loss
# use diagnostics;
use integer;
use sigtrap  qw(SEGV BUS);
use strict   qw(subs vars refs);
use subs     qw(afunc blurfl);
use warnings qw(all);
use sort     qw(stable _quicksort _mergesort);
use Config::Simple;
use Net::Google::SafeBrowsing2;
use Net::Google::SafeBrowsing2::Sqlite;
use DBI qw(:sql_types);

my $db_file = '/var/lib/nagios-plugins-cyb/google-safe-browsing.sqlite';
my $error_msg = '';
my $ok_msg = '';

# Check that the database is not empty
my $dbh = DBI->connect("dbi:SQLite:dbname=$db_file");
my $sth = $dbh->prepare('SELECT COUNT(*) FROM a_chunks');
$sth->execute();
my $row = $sth->fetch;
if($row->[0] < 1000)
{
    print "SQLite database $db_file seems empty";
    exit(2);
}

$dbh->disconnect();

# Load configuration file
my $cfg = new Config::Simple('/etc/nagios-plugins/config/safe-browsing.conf')
    or die();

# Define database storage
my $storage = Net::Google::SafeBrowsing2::Sqlite->new(file => $db_file);

# Define Google Safe Browsing API
my $gsb = Net::Google::SafeBrowsing2->new(
    key     => $cfg->param('GoogleSafeBrowsingAPIKey'),
    storage => $storage,
    );

open(URLS, '-|', 'cybweb-vhostlist-minimal')
    or die "$!";

while(<URLS>)
{
    chop;
    my $url = "http://$_/";

    if($gsb->lookup(url => $url) eq '')
    {
	$ok_msg .= "$url OK. "
    }
    else
    {
	$error_msg .= "$url is listed as malware or phishing. ";
    }
}
close(URLS);

print $error_msg . $ok_msg . "\n";

if($error_msg ne '')
{
    exit(2);
}
